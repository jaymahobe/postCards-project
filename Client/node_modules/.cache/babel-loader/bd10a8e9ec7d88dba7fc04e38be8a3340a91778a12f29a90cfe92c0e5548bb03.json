{"ast":null,"code":"var _jsxFileName = \"/Users/jaymahobe/project-js/project-postlist-internsala/app/src/Post/PostList.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport \"./PostList.css\";\nimport axios from \"axios\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchPostsAsync, selectPosts } from \"./PostListSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = () => {\n  _s();\n  const post = useSelector(selectPosts);\n  const dispatch = useDispatch();\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(1);\n  useEffect(() => {\n    fetchPosts();\n  });\n  const fetchPosts = async () => {\n    try {\n      const response = await axios.get(`http://localhost:3000/posts?page=${page}`);\n      const newPosts = response.data; // Assuming your API returns an array of posts\n      setPosts(prevPosts => [...prevPosts, ...newPosts]);\n      setPage(page + 1);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n    }\n  };\n\n  // const handleLoadMore = () => {\n  //   fetchPosts();\n  // };\n\n  // useEffect(() => {\n  //   dispatch(fetchPostsAsync());\n  // }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full post-container\",\n    children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: posts.length,\n      next: handleLoadMore,\n      hasMore: hasMore,\n      loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this),\n      endMessage: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Yay! You have seen it all.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this),\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(PostList, \"n2oK6tt7c9IaqukfaaJWWM2E1w8=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","axios","InfiniteScroll","useDispatch","useSelector","fetchPostsAsync","selectPosts","jsxDEV","_jsxDEV","PostList","_s","post","dispatch","posts","setPosts","hasMore","setHasMore","page","setPage","fetchPosts","response","get","newPosts","data","prevPosts","error","console","className","children","dataLength","length","next","handleLoadMore","loader","fileName","_jsxFileName","lineNumber","columnNumber","endMessage","style","textAlign","map","title","body","id","_c","$RefreshReg$"],"sources":["/Users/jaymahobe/project-js/project-postlist-internsala/app/src/Post/PostList.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport \"./PostList.css\";\nimport axios from \"axios\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchPostsAsync, selectPosts } from \"./PostListSlice\";\n\nconst PostList = () => {\n  const post = useSelector(selectPosts);\n  const dispatch = useDispatch();\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    fetchPosts();\n  });\n\n  const fetchPosts = async () => {\n    try {\n      const response = await axios.get(\n        `http://localhost:3000/posts?page=${page}`\n      );\n      const newPosts = response.data; // Assuming your API returns an array of posts\n      setPosts((prevPosts) => [...prevPosts, ...newPosts]);\n      setPage(page + 1);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n    }\n  };\n\n  // const handleLoadMore = () => {\n  //   fetchPosts();\n  // };\n\n  // useEffect(() => {\n  //   dispatch(fetchPostsAsync());\n  // }, [dispatch]);\n  return (\n    <div className=\"w-full post-container\">\n      <InfiniteScroll\n        dataLength={posts.length}\n        next={handleLoadMore}\n        hasMore={hasMore}\n        loader={<h4>Loading...</h4>}\n        endMessage={\n          <p style={{ textAlign: \"center\" }}>Yay! You have seen it all.</p>\n        }\n      >\n        {posts.map((post) => (\n          <div key={post.id} className=\"post\">\n            <h3>{post.title}</h3>\n            <p>{post.body}</p>\n          </div>\n        ))}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default PostList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}